			+--------------------+
			|        CS 3204     |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Ahmed Elgohary <ahmedm.saeedelgohary@gmail.com>
Amr Ramadan <es-UmrahRamadan2024@alexu.edu.eg>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

- https://www.youtube.com/@ee415intro.tooperatingsyst8
- CodeGPT

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

++ int64_t waketick;  /* determines when the thread will wake up */
   Added to struct thread in thread.h;
   
++ struct list sleep_list; /* priority queue-minHeap- listing all sleeping threads ascending according to its waketick */   
   Added to timer.c;

++ struct thread* curthread; /* thread pointer to iterate over the sleep_list*/
Added to timer.c;
	
++ enum intr_level curlevel; /* enum to kepp the previous level of int_level before being altered */
Added to timer.c;

++ struct list_elem *head; /* list element pointer to capture the thread to be waked up from the sleep_list */
Added to timer.c;

++ struct thread *hthread; /* thread pointer to keep track of the thread with the smaller wakeup time in sleep_list */
Added to timer.c;

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

! In a call to timer_sleep(ticks), the current thread is put to sleep for a specified number of ticks. The function does this by performing the following steps:

1. Calculates the wake-up time for the current thread by adding the current number of ticks to the number of ticks passed as an argument. It then stores this wake-up time in the waketick field of the current thread.
2. Inserts the current thread into the sleep_list in order of wake-up time using the list_insert_ordered function.
3. Blocks the current thread using the thread_block function, which means that it will not be scheduled to run until it is unblocked by another thread.

 the timer_interrupt function is called periodically by the hardware timer interrupt each processor tick. It increments the global ticks variable, updates thread statistics,
 and performs thread scheduling. If the sleep_list is not empty, it checks the wake-up time of the first thread in the list. 
 If the wake-up time is greater than the current number of ticks,the loop is broken and the function returns.
 Otherwise, it removes the first thread from the sleep_list and unblocks it using the thread_unblock function, which adds it to the ready queue for scheduling.
 This function is responsible for waking up threads that have been put to sleep using the timer_sleep function.
		----    	-----		-----		-----
>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

 ! having already sorted list of sleeping threads make it just an O(1) operation to check it's the time to wake up the thread in the sleep_list, 
 unlike if unsorted list is used there additional time complexity would be added to scan in the whole list for available threads to wake up.




---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

! by providing critical section which is achived using 
intr_disable(); so no other thread can modify curthread->waketick or sleep_list.
then enable the interrupt   intr_set_level(curlevel);
as result the race condition is resolved.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

!When a timer interrupt occurs during a call to timer_sleep(), race conditions are avoided by disabling interrupts using intr_disable() 
before accessing the sleep_list and re-enabling interrupts using intr_set_level() after modifying the sleep_list.which prevents any race conditions and keeps it
as a critical section executing in an atomic way.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

! in prev. designs was polling on thread ticks which leads to busy-waits and reduce the overall performance of the system. by using timer_interrupt, busy-waits get eliminated.
and sorted_list is used to store sleeping threads in ascending ordered, which improved the time complexity and processor utilization efficient.  

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run      note
-----  --- --- --- --- --- ---  -------    -------
 0      0   0   0   63  61  59     A       decay=0  
 4      4   0   0   62  61  59     A        
 8      8   0   0   61  61  59     A       round robin 
12      12  0   0   60  61  59     B        
16      12  4   0   60  60  59     B       round robin  
20      12  8   0   60  59  59     A        
24      16  8   0   59  59  59     A       round robin  
28      20  8   0   58  59  59     C       round robin 
32      20  8   4   58  59  58     B       round robin 
36      20  12  4   58  58  58     A       round robin 

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

Yes, the tick at which more than one thread has the same priority. At this moment, we adopted the 
round robin scheduling scheme. This behavior should match the behavior of the scheduler except for 
some timing errors.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

Most of our scheduling runs inside interrupt context, because load average and the recent cpu
for each thread is calculated every second, but we can't change this because if these
calculations done on the  kernel thread, the thread could be interrupted with a timer 
tick and so calculations will not be done in the right time.
Also priority recalculations done in timer every 4 ticks for the same reason.
due to previous restrictions the performance was affected negatively.

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

Our design may be not the best performance wise due to recalculations in the interrupt context,
but it is the best we could get to balance between performance and correctness.  
The good things in this design can be that it is easy to understand, simple.
But the bad things in this design can be as stated earlier that recalculations are done 
in the interrupt context which negatively affect the performance. Also, the basepriority could 
have been handled more firmly to prevent any call to thread_set_priority while priority donation 
is in control.

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

we  represented fixed-point by storing the actual value in a typedef,
and we wrote necessary functions for different operations between int and
fixed_point-either change int to fixed or make mathematical operation between them- 
we did this because kernel only supports integers arithmetic so we had to make a new
datatype to represent the fixed_point numbers to perform different operations on them 
for "recent_cpu and load_avg". 



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
