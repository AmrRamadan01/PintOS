			+--------------------+
			|        CS 3204     |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Ahmed Elgohary <ahmedm.saeedelgohary@gmail.com>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

 ++ int64_t waketick;  /* determines when the thread will wake up */
   Added to struct thread in thread.h;
   
++ struct list sleep_list; /* priority queue-minHeap- listing all sleeping threads ascending according to its waketick */   
   Added to timer.c;
   

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

! In a call to timer_sleep(ticks), the current thread is put to sleep for a specified number of ticks. The function does this by performing the following steps:

1. Calculates the wake-up time for the current thread by adding the current number of ticks to the number of ticks passed as an argument. It then stores this wake-up time in the waketick field of the current thread.
2. Inserts the current thread into the sleep_list in order of wake-up time using the list_insert_ordered function.
3. Blocks the current thread using the thread_block function, which means that it will not be scheduled to run until it is unblocked by another thread.

 the timer_interrupt function is called periodically by the hardware timer interrupt. It increments the global ticks variable, updates thread statistics,
 and performs thread scheduling. If the sleep_list is not empty, it checks the wake-up time of the first thread in the list. 
 If the wake-up time is greater than the current number of ticks,the loop is broken and the function returns.
 Otherwise, it removes the first thread from the sleep_list and unblocks it using the thread_unblock function, which adds it to the ready queue for scheduling.
 This function is responsible for waking up threads that have been put to sleep using the timer_sleep function.
		----    	-----		-----		-----
>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

 ! having already sorted list of sleeping threads make it just an O(1) operation to check it's the time to wake up the thread in the sleep_list, 
 unlike if unsorted list is used there additional time complexity would be added to scan in the whole list for available threads to wake up.




---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

! by providing critical section which is achived using 
intr_disable(); so no other thread can modify curthread->waketick or sleep_list.
then enable the interrupt   intr_set_level(curlevel);
as result the race condition is resolved.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

!When a timer interrupt occurs during a call to timer_sleep(), race conditions are avoided by disabling interrupts using intr_disable() 
before accessing the sleep_list and re-enabling interrupts using intr_set_level() after modifying the sleep_list.which prevents any race conditions and keeps it
as a critical section executing in an atomic way.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

! in prev. designs was polling on thread ticks which leads to busy-waits and reduce the overall performance of the system. by using timer_interrupt, busy-waits get eliminated.
and sorted_list is used to store sleeping threads in ascending ordered, which improved the time complexity and total efficient.  

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
